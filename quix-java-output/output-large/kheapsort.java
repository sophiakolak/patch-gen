{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.098668336868286}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 17.62796401977539}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.507097959518433}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.987298965454102}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 17.925944566726685}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 17.082300662994385}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.520201921463013}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.833947658538818}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.45609450340271}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.490074634552002}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.7876296043396}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.703979969024658}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 17.347480535507202}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.998207569122314}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.81450629234314}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.556392431259155}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.423726320266724}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.30744218826294}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.399623394012451}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.824761629104614}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.24649167060852}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.8202064037323}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.397941589355469}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.42327070236206}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.328389883041382}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.355234146118164}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.61651587486267}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.238473892211914}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.260087728500366}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.866554737091064}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.590736627578735}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.265372276306152}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.253604650497437}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.23032021522522}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.248409986495972}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.143118619918823}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.846075057983398}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.752859592437744}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.40293288230896}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.44977855682373}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.529978036880493}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.500322103500366}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.72084951400757}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.408514022827148}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 18.008511543273926}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 17.801380395889282}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 17.47731041908264}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 17.14686155319214}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.424605369567871}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.638596057891846}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 18.161608934402466}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.97302222251892}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.47519826889038}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.449018239974976}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 16.753026008605957}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.38232135772705}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.57821249961853}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (!heap.isEmpty()) {\n", "entropy": 0.6886445879936218, "length": 256, "finished": false, "message": null, "duration_seconds": 15.865370750427246}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 17.956528663635254}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 17.36223864555359}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 16.023335456848145}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 16.601823806762695}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 15.330137252807617}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 15.465113162994385}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 15.239577531814575}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 17.09314513206482}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 15.38146185874939}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 15.318506002426147}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 18.821631908416748}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 15.440270185470581}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "\n", "entropy": 2.051748037338257, "length": 256, "finished": false, "message": null, "duration_seconds": 16.208929777145386}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() > 0) {\n", "entropy": 2.5207290649414062, "length": 256, "finished": false, "message": null, "duration_seconds": 15.618453025817871}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() > 0) {\n", "entropy": 2.5207290649414062, "length": 256, "finished": false, "message": null, "duration_seconds": 15.511387348175049}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() > 0) {\n", "entropy": 2.5207290649414062, "length": 256, "finished": false, "message": null, "duration_seconds": 15.44654369354248}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() > 0) {\n", "entropy": 2.5207290649414062, "length": 256, "finished": false, "message": null, "duration_seconds": 17.111737489700317}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() > 1) {\n", "entropy": 3.8724935054779053, "length": 256, "finished": false, "message": null, "duration_seconds": 15.801977157592773}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() > 1) {\n", "entropy": 3.8724935054779053, "length": 256, "finished": false, "message": null, "duration_seconds": 16.746525049209595}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() > 1) {\n", "entropy": 3.8724935054779053, "length": 256, "finished": false, "message": null, "duration_seconds": 15.36391568183899}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() != 0) {\n", "entropy": 3.9475290775299072, "length": 256, "finished": false, "message": null, "duration_seconds": 15.535768985748291}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() != 0) {\n", "entropy": 3.9475290775299072, "length": 256, "finished": false, "message": null, "duration_seconds": 15.233450174331665}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() != 0) {\n", "entropy": 3.9475290775299072, "length": 256, "finished": false, "message": null, "duration_seconds": 16.576785802841187}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() > k) {\n", "entropy": 4.274823188781738, "length": 256, "finished": false, "message": null, "duration_seconds": 15.533183574676514}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        int i = 0;\n", "entropy": 4.361237525939941, "length": 256, "finished": false, "message": null, "duration_seconds": 17.246970415115356}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        output.add(arr.get(0));\n", "entropy": 4.371687889099121, "length": 256, "finished": false, "message": null, "duration_seconds": 15.541175127029419}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        output.add(arr.get(0));\n", "entropy": 4.371687889099121, "length": 256, "finished": false, "message": null, "duration_seconds": 15.44348692893982}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size()>0) {\n", "entropy": 5.3736701011657715, "length": 256, "finished": false, "message": null, "duration_seconds": 15.34683084487915}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        int len = arr.size();\n", "entropy": 5.623196125030518, "length": 256, "finished": false, "message": null, "duration_seconds": 15.595451831817627}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        int count = 0;\n", "entropy": 5.792826175689697, "length": 256, "finished": false, "message": null, "duration_seconds": 15.721174001693726}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.size() != k) {\n", "entropy": 5.864643573760986, "length": 256, "finished": false, "message": null, "duration_seconds": 15.432024240493774}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        Collections.sort(heap, new Comparator<Integer>() {\n", "entropy": 6.611945629119873, "length": 256, "finished": false, "message": null, "duration_seconds": 15.519531488418579}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        while (heap.peek() != null) {\n", "entropy": 7.397280693054199, "length": 256, "finished": false, "message": null, "duration_seconds": 15.6884126663208}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        output.add(0,arr.get(0));\n", "entropy": 7.820605278015137, "length": 256, "finished": false, "message": null, "duration_seconds": 16.75810408592224}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        int low = 0;\n", "entropy": 7.980555057525635, "length": 256, "finished": false, "message": null, "duration_seconds": 15.361984729766846}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        output.add(arr[0]);\n", "entropy": 7.9975666999816895, "length": 256, "finished": false, "message": null, "duration_seconds": 15.324073553085327}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        queue:\n", "entropy": 9.580955505371094, "length": 256, "finished": false, "message": null, "duration_seconds": 15.201703310012817}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        queue:\n", "entropy": 9.580955505371094, "length": 256, "finished": false, "message": null, "duration_seconds": 16.125417947769165}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        for (int i = k; i >= 1; i--) {\n", "entropy": 9.929433822631836, "length": 256, "finished": false, "message": null, "duration_seconds": 17.67838764190674}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        int smallest = k;\n", "entropy": 13.29189395904541, "length": 256, "finished": false, "message": null, "duration_seconds": 15.45245623588562}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        return kheapsortHelper(arr, heap, output, k);\n", "entropy": 16.90721321105957, "length": 256, "finished": false, "message": null, "duration_seconds": 17.37025761604309}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n", "text": "        for (int i = 0; i < k; i++) {    // go top k items to heap\n", "entropy": 32.36172103881836, "length": 256, "finished": false, "message": null, "duration_seconds": 15.341986179351807}
