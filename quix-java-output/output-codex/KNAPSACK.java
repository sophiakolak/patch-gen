{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "", "entropy": 3.401165938}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "", "entropy": 3.428664066}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7274640239999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7386533427000002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7438753708999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.75129701}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7658702148}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.768804724}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7732323640000003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7752787210000003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.775316146}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7761235632}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7761235632}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7761236232000002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.776402779}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7765856299999998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7773748665}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7785727238}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7819123129999996}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.7862875055}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.8001911400000001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.805378851}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.8136376900000002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.8187667799999998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.8192512140000001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.8293115557000004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8337074774999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j) {", "entropy": 1.8421177156}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.850927374}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8544794566}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8579662071}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8710639306999999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8770451997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8771802724999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8771802724999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8774464695}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.8974898020000002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.9169824585999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.9180769724999998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.9183317046000004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.9183317046000004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.9293959293999998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.9304621679999998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.9304635979999998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.9456577123999999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) {", "entropy": 1.969651472}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j && value + memo[i - 1][j - weight] > memo[i - 1][j]) {", "entropy": 6.576709601330001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j < weight) {", "entropy": 3.2124983253000003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight < 0) {", "entropy": 3.2995751903999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight < 0) {", "entropy": 3.3083657606000005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight) {", "entropy": 3.3443903390000007}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight) {", "entropy": 3.3451820619999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight) {", "entropy": 3.3579565950000005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight) {", "entropy": 3.3667476303000003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight) {", "entropy": 3.3703919995000002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight < 0) {", "entropy": 3.4089911651000007}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j)", "entropy": 3.4120528050000005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight < 0) {", "entropy": 3.4507586868}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j)", "entropy": 3.4509992462000003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j)", "entropy": 3.4521368501999996}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight < 0) {", "entropy": 3.4649652344}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (items[i - 1][0] > j) {", "entropy": 5.742258200499998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight < 0) {", "entropy": 3.4674691007000003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j)", "entropy": 3.472462314700001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight) {", "entropy": 3.4744504294000005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight) {", "entropy": 3.4759840069999997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight >= 0) {", "entropy": 3.4874335385}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight) {", "entropy": 3.5002403859999993}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight >= 0) {", "entropy": 3.5145633840000006}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight < 0) {", "entropy": 3.5153781996999998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j)", "entropy": 3.5188168017}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight >= 0) {", "entropy": 3.6338885691000002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight >= 0) {", "entropy": 3.6524227046}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight >= 0) {", "entropy": 3.6614478132}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j)", "entropy": 4.408641938300001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j)", "entropy": 4.5020597135}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (i - 1 >= 0 && weight <= j) {", "entropy": 7.670517539989998}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight <= j)", "entropy": 4.652742988399999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight >= 0)", "entropy": 5.468241095000001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight)", "entropy": 5.6101381099}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - weight < 0)", "entropy": 5.6159911323000005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j >= weight)", "entropy": 5.772739232000001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 1.9685873440000001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 1.972166341}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 1.9772577930000002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 1.9930524410000001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 1.993364138}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 1.995052459}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 1.995722695}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 2.033963852}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 2.037431035}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 2.037613409}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 2.054112591}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {", "entropy": 2.072083794}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (j >= weight) {", "entropy": 6.281784963400001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j < weight)", "entropy": 6.4218073954}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight > j) ", "entropy": 7.735977514999999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "", "entropy": 5.520937565}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (i - 1 >= 0)", "entropy": 8.8547661283}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else", "entropy": 3.392368539}
