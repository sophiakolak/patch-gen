{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.3568579033700003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.4119985486960003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.42342860952}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.4315274348969997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.4427297637809997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.455362062923}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.464564356199}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.468281567321}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.4850789064170002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.489517523951}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.499567527394}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.5005430136420004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.505141584166}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.5296370914120003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.5362662146500004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.555127571397}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.580224114222}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.5993034433380005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.7207802321200005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 2.7870182395580003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.827248898614}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.857070955122}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.860493802091}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.8606991242899995}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 2.8639673570840003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.9132668446450003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 2.920951789491}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.934189216309999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.945940254518}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.9459401245179997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.9475608167009995}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.9550252676079993}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 2.9666141905669994}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 2.98755742216}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 3.008411587872}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 3.029353264745001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 3.0426285790560006}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 3.049649349249999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 3.0865841417669992}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(b, a);", "entropy": 3.214810660749}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 3.2993287731270002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 3.3007534420799995}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(b, a);", "entropy": 3.3185533778700007}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(b, a);", "entropy": 3.3500698529279997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(b, a);", "entropy": 3.435886211751}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 3.469930459416}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b,a);", "entropy": 3.522521558449}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b,a);", "entropy": 4.074844617528001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a,b);", "entropy": 4.100569270554001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {", "entropy": 2.7203985266100004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {", "entropy": 2.7287215232640003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a,b);", "entropy": 4.556132283380999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {", "entropy": 2.773979350606}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(a, b);", "entropy": 4.626101753282}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {", "entropy": 2.79555507372}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {", "entropy": 2.7955818757900004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {", "entropy": 2.79802368128}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a,b);", "entropy": 4.706338969930001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(b,a);", "entropy": 5.426702986018999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op != null) c = bin_op.apply(b, a);", "entropy": 7.845734879246999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b);", "entropy": 5.749895006637}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(b, a);", "entropy": 5.871314462079}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                stack.push(bin_op.apply(b, a));", "entropy": 6.067423187690001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {", "entropy": 3.7005875877160004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {", "entropy": 3.750248826786}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {", "entropy": 3.764395333915}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {", "entropy": 3.782196961218}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {", "entropy": 3.8261730057900003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a, b); ", "entropy": 6.450844678255}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b,a);", "entropy": 6.621353735155999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 6.910366534783001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc=bin_op.apply(a,b);", "entropy": 6.963230475205}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(a, b);", "entropy": 7.076783534832}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op != null) {", "entropy": 4.321615011623}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op != null){", "entropy": 4.464524551946001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op != null)", "entropy": 4.5613617177800005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "", "entropy": 4.600085935}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                c = bin_op.apply(b, a);", "entropy": 7.703635882285999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\ttry {", "entropy": 4.7463781985499995}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "", "entropy": 4.6734324009999995}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc =  bin_op.apply(b,a);", "entropy": 8.312283218157}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\t\tc = bin_op.apply(b, a);", "entropy": 8.350956800490001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc= bin_op.apply(a, b);", "entropy": 8.410888774344997}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op == null){", "entropy": 5.071671478010001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op == null) {", "entropy": 5.199452105664001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op != null) {", "entropy": 5.306051522356}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(b, a);", "entropy": 9.015134635416}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null){", "entropy": 5.480093169718}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = bin_op.apply(a,b);\t\t", "entropy": 9.487259476029001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op!=null)", "entropy": 5.916006370099999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "", "entropy": 5.451408426}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tc = (double) bin_op.apply(b, a);", "entropy": 12.387121532954003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif ( bin_op != null) {", "entropy": 7.539763359603999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op!=null) {\t", "entropy": 12.770020519708002}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op != null) ", "entropy": 7.785224884804}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\t\t\t", "entropy": 8.382040748017001}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\t", "entropy": 3.2563505150000003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\t", "entropy": 3.2578902735}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\t", "entropy": 3.2578900235000003}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "", "entropy": 8.22309287}
