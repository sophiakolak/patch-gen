{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    Map<Integer,Integer> internal_map = dp.get(i);\n", "entropy": 3.084995985031128, "length": 256, "finished": false, "message": null, "duration_seconds": 8.20682168006897}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    if (dp.containsKey(i)) {\n", "entropy": 4.135069847106934, "length": 256, "finished": false, "message": null, "duration_seconds": 8.67634105682373}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    if (dp.containsKey(i)) {\n", "entropy": 4.135069847106934, "length": 256, "finished": false, "message": null, "duration_seconds": 8.159332275390625}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    if (dp.containsKey(i)) {\n", "entropy": 4.135069847106934, "length": 256, "finished": false, "message": null, "duration_seconds": 8.837876796722412}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    if (dp.get(i).containsKey(j)) {\n", "entropy": 4.614907741546631, "length": 256, "finished": false, "message": null, "duration_seconds": 8.194270372390747}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    Integer key = dp.get(i).get(j);\n", "entropy": 4.84228515625, "length": 256, "finished": false, "message": null, "duration_seconds": 8.14397644996643}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    if (dp.get(i).get(j) == 0) {\n", "entropy": 4.881016731262207, "length": 256, "finished": false, "message": null, "duration_seconds": 8.213895320892334}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    for (int k=0; k < dp.size(); k++) {\n", "entropy": 5.920910358428955, "length": 256, "finished": false, "message": null, "duration_seconds": 9.307215690612793}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    Integer value = dp.get(i).get(j);\n", "entropy": 6.034143924713135, "length": 256, "finished": false, "message": null, "duration_seconds": 8.203253984451294}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    dp.get(i).put(j,1);\n", "entropy": 6.150259494781494, "length": 256, "finished": false, "message": null, "duration_seconds": 8.39598298072815}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    int count = dp.get(i).get(j);\n", "entropy": 6.2741594314575195, "length": 256, "finished": false, "message": null, "duration_seconds": 9.600610733032227}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    Integer val = dp.get(i).get(j);\n", "entropy": 6.504096508026123, "length": 256, "finished": false, "message": null, "duration_seconds": 8.130162000656128}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                }\n", "entropy": 6.5815534591674805, "length": 256, "finished": false, "message": null, "duration_seconds": 8.115342855453491}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                }\n", "entropy": 6.5815534591674805, "length": 256, "finished": false, "message": null, "duration_seconds": 7.972865343093872}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    int temp = dp.get(i).get(j);\n", "entropy": 6.83103609085083, "length": 256, "finished": false, "message": null, "duration_seconds": 8.587131261825562}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    Map<Integer,Integer> map = dp.get(i);\n", "entropy": 6.915279388427734, "length": 256, "finished": false, "message": null, "duration_seconds": 8.586575508117676}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    dp.get(i).put(j,dp.get(i).get(j)+1);\n", "entropy": 7.078856468200684, "length": 256, "finished": false, "message": null, "duration_seconds": 8.234338521957397}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    int val = dp.get(i).get(j);\n", "entropy": 7.137696266174316, "length": 256, "finished": false, "message": null, "duration_seconds": 8.141514778137207}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    if (dp.get(i).get(j) > 0) {\n", "entropy": 7.160206317901611, "length": 256, "finished": false, "message": null, "duration_seconds": 8.304419040679932}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // we have a match!\n", "entropy": 7.349066734313965, "length": 256, "finished": false, "message": null, "duration_seconds": 8.103326797485352}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    Integer internal = dp.get(i).get(j);\n", "entropy": 7.760110855102539, "length": 256, "finished": false, "message": null, "duration_seconds": 8.341654062271118}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // do something\n", "entropy": 8.268033981323242, "length": 256, "finished": false, "message": null, "duration_seconds": 8.181368827819824}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    int k = 0;\n", "entropy": 8.524481773376465, "length": 256, "finished": false, "message": null, "duration_seconds": 8.077985048294067}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // code\n", "entropy": 8.709358215332031, "length": 256, "finished": false, "message": null, "duration_seconds": 8.195959091186523}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    //debug\n", "entropy": 9.01517391204834, "length": 256, "finished": false, "message": null, "duration_seconds": 8.664268732070923}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // check the internal map\n", "entropy": 9.226865768432617, "length": 256, "finished": false, "message": null, "duration_seconds": 8.189988136291504}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    Integer elem = dp.get(i).get(j);\n", "entropy": 9.439940452575684, "length": 256, "finished": false, "message": null, "duration_seconds": 8.080389499664307}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // calculate the difference\n", "entropy": 9.961036682128906, "length": 256, "finished": false, "message": null, "duration_seconds": 8.146247863769531}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // make a pair\n", "entropy": 10.049361228942871, "length": 256, "finished": false, "message": null, "duration_seconds": 8.59940791130066}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // quick check\n", "entropy": 10.056556701660156, "length": 256, "finished": false, "message": null, "duration_seconds": 8.811745405197144}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // now we have the code\n", "entropy": 10.98570728302002, "length": 256, "finished": false, "message": null, "duration_seconds": 8.227663516998291}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // check for overlap\n", "entropy": 11.012078285217285, "length": 256, "finished": false, "message": null, "duration_seconds": 8.132473230361938}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    System.out.print(s.charAt(i));\n", "entropy": 11.429757118225098, "length": 256, "finished": false, "message": null, "duration_seconds": 8.568939685821533}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // do the calculations\n", "entropy": 11.471217155456543, "length": 256, "finished": false, "message": null, "duration_seconds": 8.990826845169067}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    if (dp.get(i).containsKey(s.charAt(j))) {\n", "entropy": 11.619962692260742, "length": 256, "finished": false, "message": null, "duration_seconds": 8.42807388305664}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    int d = dp.get(i).get(j) + 1;\n", "entropy": 12.31178092956543, "length": 256, "finished": false, "message": null, "duration_seconds": 8.168404340744019}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    int min_i = dp.get(i).get(j);\n", "entropy": 12.48613166809082, "length": 256, "finished": false, "message": null, "duration_seconds": 8.752798080444336}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // grab the internal map\n", "entropy": 12.774764060974121, "length": 256, "finished": false, "message": null, "duration_seconds": 8.210089683532715}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    int guess = dp.get(i).get(j);\n", "entropy": 13.137001037597656, "length": 256, "finished": false, "message": null, "duration_seconds": 8.212375164031982}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // all are set\n", "entropy": 13.359644889831543, "length": 256, "finished": false, "message": null, "duration_seconds": 8.101698398590088}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    //cout.println(s.charAt(i) + t.charAt(j));\n", "entropy": 13.394864082336426, "length": 256, "finished": false, "message": null, "duration_seconds": 8.189937114715576}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // check for the intersection\n", "entropy": 13.410752296447754, "length": 256, "finished": false, "message": null, "duration_seconds": 8.201242923736572}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // now we have a good solution\n", "entropy": 13.941690444946289, "length": 256, "finished": false, "message": null, "duration_seconds": 8.675440788269043}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    dp.get(i).put(j, dp.get(i).get(j)+1);                \n", "entropy": 14.655597686767578, "length": 256, "finished": false, "message": null, "duration_seconds": 8.260058164596558}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // compute the distance to the end of the string\n", "entropy": 14.75, "length": 256, "finished": false, "message": null, "duration_seconds": 8.22270131111145}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    //System.out.println(s + \" \" + t + \" \" + dp.get(i).get(j));\n", "entropy": 14.976715087890625, "length": 256, "finished": false, "message": null, "duration_seconds": 8.231390714645386}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // we found an integer!\n", "entropy": 15.646249771118164, "length": 256, "finished": false, "message": null, "duration_seconds": 8.200418710708618}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    //if(i-j==0)\n", "entropy": 16.305099487304688, "length": 256, "finished": false, "message": null, "duration_seconds": 8.124006032943726}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // here it is ok\n", "entropy": 16.64786720275879, "length": 256, "finished": false, "message": null, "duration_seconds": 8.133308410644531}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if its already in the Map\n", "entropy": 17.185958862304688, "length": 256, "finished": false, "message": null, "duration_seconds": 8.26355767250061}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // this is for j\n", "entropy": 17.37567138671875, "length": 256, "finished": false, "message": null, "duration_seconds": 8.75673770904541}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // check that this is the only one\n", "entropy": 17.52459144592285, "length": 256, "finished": false, "message": null, "duration_seconds": 8.040931224822998}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // set the count of characters to 0\n", "entropy": 17.658151626586914, "length": 256, "finished": false, "message": null, "duration_seconds": 8.333252191543579}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // for each pair, count the number\n", "entropy": 18.008285522460938, "length": 256, "finished": false, "message": null, "duration_seconds": 8.70235824584961}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if it's a character, we are done!\n", "entropy": 18.0877742767334, "length": 256, "finished": false, "message": null, "duration_seconds": 8.165590524673462}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // for each character in the current row,\n", "entropy": 18.104412078857422, "length": 256, "finished": false, "message": null, "duration_seconds": 8.430349349975586}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if it is in the map, just add it\n", "entropy": 18.256980895996094, "length": 256, "finished": false, "message": null, "duration_seconds": 8.25448989868164}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    Integer result    = dp.get(i).get(j);\n", "entropy": 18.795042037963867, "length": 256, "finished": false, "message": null, "duration_seconds": 8.286157608032227}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    //if (dp.get(j) == null) dp.put(j, dp.get(j) = new HashMap<Integer,Integer>());\n", "entropy": 18.819355010986328, "length": 256, "finished": false, "message": null, "duration_seconds": 9.70750617980957}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // j is an internal token\n", "entropy": 18.86672019958496, "length": 256, "finished": false, "message": null, "duration_seconds": 8.64373517036438}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if the internal map is not empty, do a binary search\n", "entropy": 18.938676834106445, "length": 256, "finished": false, "message": null, "duration_seconds": 8.16252875328064}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // is there already an internal entry for that character?\n", "entropy": 19.76791000366211, "length": 256, "finished": false, "message": null, "duration_seconds": 8.714420557022095}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // we have it in the list...\n", "entropy": 19.95317840576172, "length": 256, "finished": false, "message": null, "duration_seconds": 8.214378118515015}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // the 1st char is the greatest char\n", "entropy": 20.557662963867188, "length": 256, "finished": false, "message": null, "duration_seconds": 8.439698219299316}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // in the final order\n", "entropy": 20.703554153442383, "length": 256, "finished": false, "message": null, "duration_seconds": 8.166370630264282}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // get the internal map and put into the counters\n", "entropy": 20.828140258789062, "length": 256, "finished": false, "message": null, "duration_seconds": 8.130753517150879}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // putting this point in\n", "entropy": 20.87970542907715, "length": 256, "finished": false, "message": null, "duration_seconds": 8.227490425109863}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    //PAI\n", "entropy": 21.007408142089844, "length": 256, "finished": false, "message": null, "duration_seconds": 9.362982511520386}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // we hit one of the ranges\n", "entropy": 21.307804107666016, "length": 256, "finished": false, "message": null, "duration_seconds": 8.175775289535522}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // keep this bit on\n", "entropy": 21.635570526123047, "length": 256, "finished": false, "message": null, "duration_seconds": 8.086923122406006}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    System.out.println(\"S[\"+i+\"] -> \"+s.charAt(i));\n", "entropy": 22.07475471496582, "length": 256, "finished": false, "message": null, "duration_seconds": 8.78735089302063}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // make sure that the number of internal maps is set to 0\n", "entropy": 22.77100372314453, "length": 256, "finished": false, "message": null, "duration_seconds": 8.105053901672363}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if we have a curried match, just add it\n", "entropy": 22.88581085205078, "length": 256, "finished": false, "message": null, "duration_seconds": 8.88141417503357}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if the internal counter has a value, it means that the\n", "entropy": 23.103214263916016, "length": 256, "finished": false, "message": null, "duration_seconds": 8.674967765808105}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    dp.get(i).put(j,1); // the first one is a prime\n", "entropy": 23.601177215576172, "length": 256, "finished": false, "message": null, "duration_seconds": 8.345486879348755}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // equals or end-of-line\n", "entropy": 23.960376739501953, "length": 256, "finished": false, "message": null, "duration_seconds": 8.26416301727295}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if the i-th character is lower then add the\n", "entropy": 24.014015197753906, "length": 256, "finished": false, "message": null, "duration_seconds": 8.729382038116455}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // print in seperate order\n", "entropy": 24.30677604675293, "length": 256, "finished": false, "message": null, "duration_seconds": 8.344616413116455}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // we found the match.. set initial map\n", "entropy": 27.021705627441406, "length": 256, "finished": false, "message": null, "duration_seconds": 8.189716577529907}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // key is the length, value is the index to the string\n", "entropy": 27.31216049194336, "length": 256, "finished": false, "message": null, "duration_seconds": 8.897163152694702}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // Add the line length to map\n", "entropy": 27.850139617919922, "length": 256, "finished": false, "message": null, "duration_seconds": 8.192188024520874}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // then we have to do an elaborate\n", "entropy": 29.601926803588867, "length": 256, "finished": false, "message": null, "duration_seconds": 8.141347646713257}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // collect all the word to consider\n", "entropy": 29.710336685180664, "length": 256, "finished": false, "message": null, "duration_seconds": 8.114896774291992}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // OK, now we know we have a dumb loop!\n", "entropy": 30.440391540527344, "length": 256, "finished": false, "message": null, "duration_seconds": 8.180830955505371}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // the list has is an internal counter\n", "entropy": 30.89361572265625, "length": 256, "finished": false, "message": null, "duration_seconds": 8.23265290260315}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if we are on the same match, append.\n", "entropy": 30.910045623779297, "length": 256, "finished": false, "message": null, "duration_seconds": 8.285327196121216}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // i-th interval is at least 1:\n", "entropy": 31.248348236083984, "length": 256, "finished": false, "message": null, "duration_seconds": 8.985525846481323}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // find the minimum size of daughter nodes\n", "entropy": 33.30815124511719, "length": 256, "finished": false, "message": null, "duration_seconds": 8.540126323699951}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // now that we are the same character we don't need\n", "entropy": 34.547698974609375, "length": 256, "finished": false, "message": null, "duration_seconds": 9.243583917617798}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // as we found a node, it will be the previous node\n", "entropy": 35.94331741333008, "length": 256, "finished": false, "message": null, "duration_seconds": 9.032219886779785}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // if this character is a candidate digit, it is an error\n", "entropy": 36.68386459350586, "length": 256, "finished": false, "message": null, "duration_seconds": 8.247945070266724}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // lets see if we already have the hashes. if so, don't change the hash\n", "entropy": 42.05553436279297, "length": 256, "finished": false, "message": null, "duration_seconds": 8.40775179862976}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // e.g. is a 4-letter capital, but not a 3-letter lowercase\n", "entropy": 46.610267639160156, "length": 256, "finished": false, "message": null, "duration_seconds": 8.10284423828125}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // we are sure every char is in the strings and not in a frequency\n", "entropy": 47.15375518798828, "length": 256, "finished": false, "message": null, "duration_seconds": 8.246015310287476}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // single-char-string s-t, so calculate d-len\n", "entropy": 52.79747009277344, "length": 256, "finished": false, "message": null, "duration_seconds": 8.478067874908447}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // the internal maps for 1..t.length() are indp_map[i], so we have to\n", "entropy": 53.13489532470703, "length": 256, "finished": false, "message": null, "duration_seconds": 8.875508785247803}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // we have the element ... so now we add all the elements of the ignore list ...\n", "entropy": 54.20093536376953, "length": 256, "finished": false, "message": null, "duration_seconds": 8.18427038192749}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // we know the jth one is valid.. make new we know the jth jst character\n", "entropy": 62.62135314941406, "length": 256, "finished": false, "message": null, "duration_seconds": 8.214309692382812}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    // Extruder is a multibyte character.. we can do this because of variations\n", "entropy": 67.0129165649414, "length": 256, "finished": false, "message": null, "duration_seconds": 8.088022232055664}
{"context": "package java_programs;\nimport java.util.*;\n\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n", "text": "                    //this is the case : where i,j are not in the actual table => we need to add i,j -> j\n", "entropy": 70.91490173339844, "length": 256, "finished": false, "message": null, "duration_seconds": 8.2430260181427}
