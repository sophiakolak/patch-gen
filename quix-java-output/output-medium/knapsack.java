{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.34257197380066}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.323629379272461}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.265722513198853}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.427404165267944}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.305679321289062}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.286542654037476}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.370804071426392}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.408093214035034}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.232205390930176}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.379231691360474}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.299881219863892}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.624035596847534}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.341403007507324}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.505692958831787}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.286131858825684}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.443400144577026}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.402206182479858}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.282415628433228}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.270585298538208}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.391000032424927}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.429503679275513}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.396251201629639}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.36385464668274}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.443051815032959}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.360841035842896}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.341604709625244}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.397762775421143}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.374704599380493}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.406374216079712}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.392239093780518}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.584516286849976}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.312419414520264}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.372129440307617}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.401387929916382}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else {\n", "entropy": 0.7907924652099609, "length": 256, "finished": false, "message": null, "duration_seconds": 8.398699045181274}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.36264967918396}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.258038997650146}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.408934354782104}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.54883623123169}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.590096473693848}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.328328132629395}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.45285177230835}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.38922929763794}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.227515459060669}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.356331586837769}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else\n", "entropy": 2.7042973041534424, "length": 256, "finished": false, "message": null, "duration_seconds": 8.418859004974365}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.359666109085083}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.35325002670288}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.312114477157593}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.389359712600708}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.263086557388306}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.314735651016235}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.42556643486023}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.462467908859253}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.238924264907837}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight;\n", "entropy": 2.745608329772949, "length": 256, "finished": false, "message": null, "duration_seconds": 8.492663860321045}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] = memo[i - 1][j] + weight;\n", "entropy": 3.378688335418701, "length": 256, "finished": false, "message": null, "duration_seconds": 8.303775548934937}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] = memo[i - 1][j] + weight;\n", "entropy": 3.378688335418701, "length": 256, "finished": false, "message": null, "duration_seconds": 8.367085456848145}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] = memo[i - 1][j] + weight;\n", "entropy": 3.378688335418701, "length": 256, "finished": false, "message": null, "duration_seconds": 8.471308469772339}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight * items[i - 1][j];\n", "entropy": 4.501770496368408, "length": 256, "finished": false, "message": null, "duration_seconds": 8.338477373123169}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight * items[i - 1][j];\n", "entropy": 4.501770496368408, "length": 256, "finished": false, "message": null, "duration_seconds": 8.435795783996582}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += weight * items[i - 1][j];\n", "entropy": 4.501770496368408, "length": 256, "finished": false, "message": null, "duration_seconds": 8.352455615997314}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (j - 1 >= 0) {\n", "entropy": 4.8812150955200195, "length": 256, "finished": false, "message": null, "duration_seconds": 8.406769037246704}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (i - 1 >= 0) {\n", "entropy": 4.996752738952637, "length": 256, "finished": false, "message": null, "duration_seconds": 8.274121284484863}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (i - 1 >= 0) {\n", "entropy": 5.0316596031188965, "length": 256, "finished": false, "message": null, "duration_seconds": 8.554986238479614}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (i - 1 >= 0) {\n", "entropy": 5.0316596031188965, "length": 256, "finished": false, "message": null, "duration_seconds": 8.518388271331787}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (items[i - 1][j] == 0) {\n", "entropy": 5.253322601318359, "length": 256, "finished": false, "message": null, "duration_seconds": 8.324274063110352}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (i == 1 || j == 1) {\n", "entropy": 5.2570719718933105, "length": 256, "finished": false, "message": null, "duration_seconds": 8.398706436157227}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else{\n", "entropy": 5.3832831382751465, "length": 256, "finished": false, "message": null, "duration_seconds": 8.290889739990234}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "\n                memo[i][j] += weight;\n", "entropy": 5.719498634338379, "length": 256, "finished": false, "message": null, "duration_seconds": 8.433189153671265}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (items[i - 1][j] == 0) {\n", "entropy": 5.9523701667785645, "length": 256, "finished": false, "message": null, "duration_seconds": 8.460359811782837}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (j == capacity) {\n", "entropy": 6.100416660308838, "length": 256, "finished": false, "message": null, "duration_seconds": 8.539219617843628}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] = memo[i - 1][j] + weight + value;\n", "entropy": 6.106113433837891, "length": 256, "finished": false, "message": null, "duration_seconds": 8.301838874816895}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (items[i][j] == 0) {\n", "entropy": 6.3152570724487305, "length": 256, "finished": false, "message": null, "duration_seconds": 8.360008478164673}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "\n                memo[i][j] = memo[i - 1][j] + weight;\n", "entropy": 6.385227680206299, "length": 256, "finished": false, "message": null, "duration_seconds": 8.46207070350647}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] += items[i - 1][j];\n", "entropy": 6.52304220199585, "length": 256, "finished": false, "message": null, "duration_seconds": 8.553327322006226}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                weight += memo[i][j];\n", "entropy": 6.989773750305176, "length": 256, "finished": false, "message": null, "duration_seconds": 8.409770488739014}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (items[i - 1][j] == items[i][j - 1]) {\n", "entropy": 7.105539321899414, "length": 256, "finished": false, "message": null, "duration_seconds": 8.328357696533203}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (i == 1 || j == 1) {\n", "entropy": 7.1733598709106445, "length": 256, "finished": false, "message": null, "duration_seconds": 8.279689311981201}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] = memo[i - 1][j] + weight * items[i][j];\n", "entropy": 7.2913336753845215, "length": 256, "finished": false, "message": null, "duration_seconds": 8.422893524169922}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                weight = weight + items[i - 1][j];\n", "entropy": 7.441890239715576, "length": 256, "finished": false, "message": null, "duration_seconds": 8.437710523605347}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (i == n && j == n) {\n", "entropy": 7.660391807556152, "length": 256, "finished": false, "message": null, "duration_seconds": 8.354138374328613}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (weight != 0) {\n", "entropy": 7.923468589782715, "length": 256, "finished": false, "message": null, "duration_seconds": 8.461702823638916}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i][j] |= weight * value;\n", "entropy": 8.077686309814453, "length": 256, "finished": false, "message": null, "duration_seconds": 8.357579946517944}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                memo[i - 1][j] = memo[i - 1][j] + weight;\n", "entropy": 8.252999305725098, "length": 256, "finished": false, "message": null, "duration_seconds": 8.343494415283203}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight < 0) {\n", "entropy": 8.47854995727539, "length": 256, "finished": false, "message": null, "duration_seconds": 8.275818347930908}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (value != 0) {\n", "entropy": 8.859809875488281, "length": 256, "finished": false, "message": null, "duration_seconds": 8.260648012161255}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j == capacity)\n", "entropy": 8.906048774719238, "length": 256, "finished": false, "message": null, "duration_seconds": 8.447545051574707}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight == memo[i - 1][j]) {\n", "entropy": 9.011496543884277, "length": 256, "finished": false, "message": null, "duration_seconds": 8.474117040634155}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (items[i - 1][j - 1] == items[i - 1][j]) {\n", "entropy": 9.31054401397705, "length": 256, "finished": false, "message": null, "duration_seconds": 8.403954029083252}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (items[i - 1][j] >= value) {\n", "entropy": 10.215519905090332, "length": 256, "finished": false, "message": null, "duration_seconds": 8.366978645324707}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if (items[i - 1][0] != items[i][j]) {\n", "entropy": 10.509197235107422, "length": 256, "finished": false, "message": null, "duration_seconds": 8.442363977432251}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                value = weight * value + memo[i][j];\n", "entropy": 11.10175895690918, "length": 256, "finished": false, "message": null, "duration_seconds": 8.38022232055664}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (items[i - 1][0] != items[i][j])\n", "entropy": 11.520686149597168, "length": 256, "finished": false, "message": null, "duration_seconds": 8.429532527923584}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (j - 1 > i) {\n", "entropy": 12.12421703338623, "length": 256, "finished": false, "message": null, "duration_seconds": 8.507998943328857}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (item(i - 1, j) == weight) {\n", "entropy": 14.136322021484375, "length": 256, "finished": false, "message": null, "duration_seconds": 8.339754104614258}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (item(i, j) < weight)\n", "entropy": 14.271278381347656, "length": 256, "finished": false, "message": null, "duration_seconds": 8.421041250228882}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (i > 0 && j >= 0 && j < capacity && items[i - 1][j] == items[i][j]) {\n", "entropy": 16.891143798828125, "length": 256, "finished": false, "message": null, "duration_seconds": 8.531167030334473}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                if ((i - 1) / capacity * (j - 1) + (j - 1) / capacity < capacity) {\n", "entropy": 28.784732818603516, "length": 256, "finished": false, "message": null, "duration_seconds": 8.594062566757202}
{"context": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n", "text": "                else if (weight != 0 && itemToWeight(items[i - 1][0], items[i - 1][1], items[i][j - 1], items[i][j]) == weight) {\n", "entropy": 29.03986358642578, "length": 256, "finished": false, "message": null, "duration_seconds": 8.413331747055054}
