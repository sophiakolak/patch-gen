{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.07530164718628}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.37616777420044}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.307848453521729}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 9.606197595596313}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.096276760101318}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.044965744018555}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.323408126831055}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.489677906036377}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.412967443466187}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.20802617073059}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.3555006980896}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.288050889968872}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 7.998883485794067}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.470238208770752}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.547256231307983}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.24638819694519}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.074602603912354}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.370356559753418}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.155850648880005}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.35135531425476}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.221153259277344}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.13430380821228}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 9.023873567581177}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.231990098953247}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.879179954528809}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.069274425506592}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.75668978691101}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.26867127418518}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.066958665847778}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.350980758666992}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.073554754257202}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.14709210395813}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.066677808761597}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.180355310440063}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.107390880584717}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.273556232452393}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.695392370223999}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.852295637130737}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 9.57854437828064}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.201191425323486}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.325081586837769}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.149798393249512}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.509938716888428}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.652495384216309}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.109843254089355}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.577636241912842}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.435949087142944}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.451754570007324}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.21099853515625}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.132440567016602}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.641186475753784}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {\n", "entropy": 0.6494424343109131, "length": 256, "finished": false, "message": null, "duration_seconds": 8.08252477645874}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.800111770629883}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.342543840408325}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.291278600692749}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.57782793045044}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.16260576248169}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.111600637435913}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.766688346862793}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.080979347229004}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.472604751586914}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 9.203495025634766}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null) {\n", "entropy": 2.1949570178985596, "length": 256, "finished": false, "message": null, "duration_seconds": 8.76752758026123}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op != null) {\n", "entropy": 2.7847979068756104, "length": 256, "finished": false, "message": null, "duration_seconds": 8.425647020339966}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op != null) {\n", "entropy": 2.7847979068756104, "length": 256, "finished": false, "message": null, "duration_seconds": 8.113098859786987}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op != null) {\n", "entropy": 2.7847979068756104, "length": 256, "finished": false, "message": null, "duration_seconds": 8.602613925933838}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op != null) {\n", "entropy": 2.7847979068756104, "length": 256, "finished": false, "message": null, "duration_seconds": 8.390515327453613}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op != null) {\n", "entropy": 2.7847979068756104, "length": 256, "finished": false, "message": null, "duration_seconds": 8.166033744812012}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null)\n", "entropy": 3.235412120819092, "length": 256, "finished": false, "message": null, "duration_seconds": 8.168832778930664}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null)\n", "entropy": 3.235412120819092, "length": 256, "finished": false, "message": null, "duration_seconds": 8.149309635162354}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null)\n", "entropy": 3.235412120819092, "length": 256, "finished": false, "message": null, "duration_seconds": 8.362016677856445}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null)\n", "entropy": 3.235412120819092, "length": 256, "finished": false, "message": null, "duration_seconds": 8.171718835830688}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null)\n", "entropy": 3.235412120819092, "length": 256, "finished": false, "message": null, "duration_seconds": 8.166244745254517}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null)\n", "entropy": 3.235412120819092, "length": 256, "finished": false, "message": null, "duration_seconds": 8.426023960113525}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\n\t\tif (bin_op != null) {\n", "entropy": 3.848301887512207, "length": 256, "finished": false, "message": null, "duration_seconds": 9.160921573638916}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\n\t\tif (bin_op != null) {\n", "entropy": 3.848301887512207, "length": 256, "finished": false, "message": null, "duration_seconds": 8.921140909194946}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\n\t\tif (bin_op != null) {\n", "entropy": 3.848301887512207, "length": 256, "finished": false, "message": null, "duration_seconds": 8.194973468780518}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op != null) {\n", "entropy": 3.9945242404937744, "length": 256, "finished": false, "message": null, "duration_seconds": 8.03143310546875}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op != null) {\n", "entropy": 3.9945242404937744, "length": 256, "finished": false, "message": null, "duration_seconds": 8.084330320358276}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op != null) {\n", "entropy": 3.9945242404937744, "length": 256, "finished": false, "message": null, "duration_seconds": 8.127308368682861}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif(bin_op != null) {\n", "entropy": 3.9945242404937744, "length": 256, "finished": false, "message": null, "duration_seconds": 8.571231126785278}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op == null) {\n", "entropy": 4.1232147216796875, "length": 256, "finished": false, "message": null, "duration_seconds": 8.109590291976929}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op == null) {\n", "entropy": 4.1232147216796875, "length": 256, "finished": false, "message": null, "duration_seconds": 8.016208171844482}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op == null) {\n", "entropy": 4.1232147216796875, "length": 256, "finished": false, "message": null, "duration_seconds": 8.192333698272705}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null)\n", "entropy": 4.6239166259765625, "length": 256, "finished": false, "message": null, "duration_seconds": 8.11203408241272}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null)\n", "entropy": 4.6239166259765625, "length": 256, "finished": false, "message": null, "duration_seconds": 8.133330583572388}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op == null)\n", "entropy": 4.6239166259765625, "length": 256, "finished": false, "message": null, "duration_seconds": 8.418710708618164}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) c = bin_op.apply(a, b);\n", "entropy": 5.10605525970459, "length": 256, "finished": false, "message": null, "duration_seconds": 8.115946054458618}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) c = bin_op.applyAsDouble(a, b);\n", "entropy": 5.140294075012207, "length": 256, "finished": false, "message": null, "duration_seconds": 8.160772562026978}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (null != bin_op) {\n", "entropy": 5.7254791259765625, "length": 256, "finished": false, "message": null, "duration_seconds": 8.166834354400635}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) c = (Double) bin_op.apply(a, b);\n", "entropy": 5.811840534210205, "length": 256, "finished": false, "message": null, "duration_seconds": 8.22930908203125}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\n\t\tif (bin_op == null)\n", "entropy": 7.726117134094238, "length": 256, "finished": false, "message": null, "duration_seconds": 8.165274143218994}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                if (bin_op instanceof BinaryOperator<Double>) {\n", "entropy": 8.089813232421875, "length": 256, "finished": false, "message": null, "duration_seconds": 8.499823570251465}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\t\n\t\tif (c != null) {\n", "entropy": 10.049294471740723, "length": 256, "finished": false, "message": null, "duration_seconds": 8.273486375808716}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\n                if (bin_op != null && bin_op.test(a, b)) {\n", "entropy": 10.119297981262207, "length": 256, "finished": false, "message": null, "duration_seconds": 8.080109357833862}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) {    \t\t\n", "entropy": 12.015922546386719, "length": 256, "finished": false, "message": null, "duration_seconds": 8.169769763946533}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) c = (Double) bin_op.apply(null, a, b);\n", "entropy": 13.497957229614258, "length": 256, "finished": false, "message": null, "duration_seconds": 8.13922905921936}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "                while(token != null) {\n", "entropy": 14.773859024047852, "length": 256, "finished": false, "message": null, "duration_seconds": 8.236938238143921}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\t\tif (bin_op != null) switch (bin_op.operator) {\n", "entropy": 16.026966094970703, "length": 256, "finished": false, "message": null, "duration_seconds": 8.115745306015015}
{"context": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n\tMap<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n\top.put(\"+\", (a, b) -> a + b); \n\top.put(\"-\", (a, b) -> a - b); \n\top.put(\"*\", (a, b) -> a * b); \n\top.put(\"/\", (a, b) -> a / b); \n\t\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n\t\ttoken = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n\t\tDouble c = 0.0;\n\t\tBinaryOperator<Double> bin_op = op.get(token);\n", "text": "\n                double r = 0.0;\n", "entropy": 16.616456985473633, "length": 256, "finished": false, "message": null, "duration_seconds": 8.10676884651184}
