{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight < value:\n", "entropy": 2.0828042030334473, "length": 256, "finished": false, "message": null, "duration_seconds": 11.35008692741394}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight < value:\n", "entropy": 2.0828042030334473, "length": 256, "finished": false, "message": null, "duration_seconds": 11.145516395568848}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight < value:\n", "entropy": 2.0828042030334473, "length": 256, "finished": false, "message": null, "duration_seconds": 11.514854669570923}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight < value:\n", "entropy": 2.0828042030334473, "length": 256, "finished": false, "message": null, "duration_seconds": 11.979934215545654}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight < value:\n", "entropy": 2.0828042030334473, "length": 256, "finished": false, "message": null, "duration_seconds": 12.38499140739441}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight < value:\n", "entropy": 2.0828042030334473, "length": 256, "finished": false, "message": null, "duration_seconds": 11.066971778869629}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight < value:\n", "entropy": 2.0828042030334473, "length": 256, "finished": false, "message": null, "duration_seconds": 11.258747577667236}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.019586086273193}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.087803363800049}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 12.10338282585144}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.43506145477295}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.252797842025757}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.288835763931274}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.801924705505371}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.161016464233398}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.084506273269653}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.162882089614868}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 10.98810887336731}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.439498901367188}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.127253532409668}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.14498782157898}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.036320447921753}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == value:\n", "entropy": 2.1538703441619873, "length": 256, "finished": false, "message": null, "duration_seconds": 11.159564733505249}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.098481893539429}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.109524488449097}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.03053617477417}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.137616157531738}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.073043823242188}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.11098575592041}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.058439254760742}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.120799779891968}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight\n", "entropy": 2.3042495250701904, "length": 256, "finished": false, "message": null, "duration_seconds": 11.73927927017212}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > 0:\n", "entropy": 2.712522506713867, "length": 256, "finished": false, "message": null, "duration_seconds": 11.188466310501099}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > 0:\n", "entropy": 2.712522506713867, "length": 256, "finished": false, "message": null, "duration_seconds": 11.561343908309937}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > 0:\n", "entropy": 2.712522506713867, "length": 256, "finished": false, "message": null, "duration_seconds": 11.82080888748169}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > 0:\n", "entropy": 2.712522506713867, "length": 256, "finished": false, "message": null, "duration_seconds": 11.530356407165527}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > 0:\n", "entropy": 2.712522506713867, "length": 256, "finished": false, "message": null, "duration_seconds": 12.300226926803589}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > 0:\n", "entropy": 2.712522506713867, "length": 256, "finished": false, "message": null, "duration_seconds": 11.074725866317749}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > 0:\n", "entropy": 2.712522506713867, "length": 256, "finished": false, "message": null, "duration_seconds": 11.541106700897217}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, capacity] = weight\n", "entropy": 2.825889825820923, "length": 256, "finished": false, "message": null, "duration_seconds": 11.086748361587524}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, capacity] = weight\n", "entropy": 2.825889825820923, "length": 256, "finished": false, "message": null, "duration_seconds": 11.77312707901001}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, capacity] = weight\n", "entropy": 2.825889825820923, "length": 256, "finished": false, "message": null, "duration_seconds": 11.099509954452515}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, capacity] = weight\n", "entropy": 2.825889825820923, "length": 256, "finished": false, "message": null, "duration_seconds": 11.129398107528687}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, capacity] = weight\n", "entropy": 2.825889825820923, "length": 256, "finished": false, "message": null, "duration_seconds": 11.061270713806152}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            memo[i, j] += weight * value\n", "entropy": 3.0933382511138916, "length": 256, "finished": false, "message": null, "duration_seconds": 11.146308183670044}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            memo[i, j] += weight * value\n", "entropy": 3.0933382511138916, "length": 256, "finished": false, "message": null, "duration_seconds": 12.008100509643555}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            memo[i, j] += weight * value\n", "entropy": 3.0933382511138916, "length": 256, "finished": false, "message": null, "duration_seconds": 13.173126935958862}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            memo[i, j] += weight * value\n", "entropy": 3.0933382511138916, "length": 256, "finished": false, "message": null, "duration_seconds": 11.124080896377563}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            memo[i, j] += weight * value\n", "entropy": 3.0933382511138916, "length": 256, "finished": false, "message": null, "duration_seconds": 11.23637866973877}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            memo[i, j] += weight * value\n", "entropy": 3.0933382511138916, "length": 256, "finished": false, "message": null, "duration_seconds": 11.14875841140747}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            memo[i, j] += weight * value\n", "entropy": 3.0933382511138916, "length": 256, "finished": false, "message": null, "duration_seconds": 12.066331624984741}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == 0:\n", "entropy": 3.110079050064087, "length": 256, "finished": false, "message": null, "duration_seconds": 11.10765814781189}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == 0:\n", "entropy": 3.110079050064087, "length": 256, "finished": false, "message": null, "duration_seconds": 11.026493072509766}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == 0:\n", "entropy": 3.110079050064087, "length": 256, "finished": false, "message": null, "duration_seconds": 11.05092191696167}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == 0:\n", "entropy": 3.110079050064087, "length": 256, "finished": false, "message": null, "duration_seconds": 11.127552270889282}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == 0:\n", "entropy": 3.110079050064087, "length": 256, "finished": false, "message": null, "duration_seconds": 11.19546890258789}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.075183629989624}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.55058765411377}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.364204168319702}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.826998472213745}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.115121126174927}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.073877573013306}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.106439590454102}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.43045711517334}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight <= value:\n", "entropy": 3.2752041816711426, "length": 256, "finished": false, "message": null, "duration_seconds": 11.063448429107666}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > value:\n", "entropy": 3.310858726501465, "length": 256, "finished": false, "message": null, "duration_seconds": 11.172046899795532}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > value:\n", "entropy": 3.310858726501465, "length": 256, "finished": false, "message": null, "duration_seconds": 11.634299039840698}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > value:\n", "entropy": 3.310858726501465, "length": 256, "finished": false, "message": null, "duration_seconds": 10.994165182113647}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, weight] = value\n", "entropy": 3.4592819213867188, "length": 256, "finished": false, "message": null, "duration_seconds": 11.112943172454834}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, weight] = value\n", "entropy": 3.4592819213867188, "length": 256, "finished": false, "message": null, "duration_seconds": 10.991214752197266}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight * value\n", "entropy": 4.105535984039307, "length": 256, "finished": false, "message": null, "duration_seconds": 11.693842649459839}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if value < weight:\n", "entropy": 4.162807464599609, "length": 256, "finished": false, "message": null, "duration_seconds": 11.045777082443237}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if value <= weight:\n", "entropy": 4.304177284240723, "length": 256, "finished": false, "message": null, "duration_seconds": 11.54387879371643}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if value <= weight:\n", "entropy": 4.304177284240723, "length": 256, "finished": false, "message": null, "duration_seconds": 11.204000473022461}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight * memo[i, j] < value:\n", "entropy": 4.500949382781982, "length": 256, "finished": false, "message": null, "duration_seconds": 12.49407148361206}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight * memo[i, j] < value:\n", "entropy": 4.500949382781982, "length": 256, "finished": false, "message": null, "duration_seconds": 10.97931432723999}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == 1:\n", "entropy": 4.523732662200928, "length": 256, "finished": false, "message": null, "duration_seconds": 11.516499280929565}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight == 1:\n", "entropy": 4.523732662200928, "length": 256, "finished": false, "message": null, "duration_seconds": 11.611897706985474}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight + value <= capacity:\n", "entropy": 4.628124713897705, "length": 256, "finished": false, "message": null, "duration_seconds": 11.133989572525024}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight + value <= capacity:\n", "entropy": 4.628124713897705, "length": 256, "finished": false, "message": null, "duration_seconds": 11.121999263763428}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight + value <= capacity:\n", "entropy": 4.628124713897705, "length": 256, "finished": false, "message": null, "duration_seconds": 11.239527702331543}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i - 1] = weight\n", "entropy": 4.9305219650268555, "length": 256, "finished": false, "message": null, "duration_seconds": 10.981796979904175}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        if weight > 0:\n", "entropy": 5.15909481048584, "length": 256, "finished": false, "message": null, "duration_seconds": 11.195924997329712}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        if weight > 0:\n", "entropy": 5.15909481048584, "length": 256, "finished": false, "message": null, "duration_seconds": 11.013421058654785}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        for k in range(1, weight + 1):\n", "entropy": 5.253077030181885, "length": 256, "finished": false, "message": null, "duration_seconds": 11.912158012390137}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight != 0:\n", "entropy": 5.840184688568115, "length": 256, "finished": false, "message": null, "duration_seconds": 11.113750219345093}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight + value <= j:\n", "entropy": 5.867583274841309, "length": 256, "finished": false, "message": null, "duration_seconds": 10.999222040176392}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight + value > j:\n", "entropy": 5.8994293212890625, "length": 256, "finished": false, "message": null, "duration_seconds": 11.111348390579224}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] = weight + value\n", "entropy": 6.308135509490967, "length": 256, "finished": false, "message": null, "duration_seconds": 11.88585877418518}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i - 1] = weight * value\n", "entropy": 6.447519302368164, "length": 256, "finished": false, "message": null, "duration_seconds": 10.948486328125}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight * memo[i, j] >= value:\n", "entropy": 6.524834632873535, "length": 256, "finished": false, "message": null, "duration_seconds": 11.107261180877686}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "        memo[i, i] += weight\n", "entropy": 6.876468181610107, "length": 256, "finished": false, "message": null, "duration_seconds": 11.85228443145752}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if value + weight <= capacity:\n", "entropy": 7.145229339599609, "length": 256, "finished": false, "message": null, "duration_seconds": 11.058045387268066}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight > 1:\n", "entropy": 7.158278465270996, "length": 256, "finished": false, "message": null, "duration_seconds": 11.26239824295044}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if weight - value <= 0:\n", "entropy": 7.31406307220459, "length": 256, "finished": false, "message": null, "duration_seconds": 11.342452764511108}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if value <= memo[i - 1, j]:\n", "entropy": 8.908281326293945, "length": 256, "finished": false, "message": null, "duration_seconds": 11.175803661346436}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "    return [weight, value]\n", "entropy": 9.277992248535156, "length": 256, "finished": false, "message": null, "duration_seconds": 11.050028085708618}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            if value + weight >= 0:\n", "entropy": 10.925382614135742, "length": 256, "finished": false, "message": null, "duration_seconds": 11.176833152770996}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            # if weight + value < capacity:\n", "entropy": 15.627019882202148, "length": 256, "finished": false, "message": null, "duration_seconds": 11.096338510513306}
{"context": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n", "text": "            memo[i, j] = min(max(memo[i - 1, j - 1] + weight * value, 0), capacity - 1)\n", "entropy": 17.691940307617188, "length": 256, "finished": false, "message": null, "duration_seconds": 11.047242641448975}
