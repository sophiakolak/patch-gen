{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.32275374383}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.32887923385900003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.332277477651}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3324766058619999}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33401743340600004}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33414276724200004}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33473560836400007}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33517064177}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.335236108496}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.335995724001}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.335995724001}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33612816481100005}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33612816481100005}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33651856144500003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.336544707191}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33655731545400003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.336757859582}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33691021398099996}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33717907333999997}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33750279658900006}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33772874551300003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.337791336395}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33789376479499994}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33823192966899995}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.338427344693}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3386386465959999}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33877563507399994}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.338791844224}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33907507413800003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33915853429}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.33922284505300004}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.339242624543}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.339788803816}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.339863571729}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.339896500328}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.339960202845}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.340323607068}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34063730099299994}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.341007388207}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34105891474800004}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.341159563438}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.341315683249}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3413328361580001}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.341481450473}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.341611614549}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.341716650055}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.341929277572}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.342080941873}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.342172826507}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.342285361201}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.342480739156}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.342500665866}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.342572129227}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34265407491500005}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.342864564084}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.343128161928}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34325353831}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34340331189100004}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3434764057209999}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34357038968899994}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.343572388044}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34361217423100004}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.343612370231}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.343701483021}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34394034375400007}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3439650292709999}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.344035532267}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34422262285999994}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.344418157598}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34553836334399995}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.346628576694}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3472113823169999}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34735168926}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34748379579199995}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34812989569799996}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.348275685229}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.34932902400800003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.349865179991}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3498880396609999}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.350289239996}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.35043659641400005}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.350760868809}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3513862663869999}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.35201514181800003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 0.3558298279040001}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 2.913995626289}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 2.931422711047}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.0174406997450003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.0258023709980004}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.27850348601}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.3140254813969996}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.3239052495249997}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.3305862669529995}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.3425935232089996}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.3775091216249993}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 3.3885381548740003}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:],target[1:])", "entropy": 4.674094862616001}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 5.339013620795001}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return levenshtein(source[1:], target[1:])", "entropy": 5.504065970609999}
{"context": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n", "text": "        return distance(source[1:], target[1:])", "entropy": 6.40776713301}
